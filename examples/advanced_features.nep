# उन्नत प्रोग्रामिङ विशेषताहरू
# Advanced Programming Features

# जेनेरेटर कार्य
कार्य संख्या_जेनेरेटर(सुरु, अन्त):
    संख्या i = सुरु
    जबसम्म i < अन्त:
        फिर्ता i
        i = i + १

# डेकोरेटर
कार्य टाइमर(कार्य):
    कार्य wrapper(*args, **kwargs):
        सुरु_समय = time.time()
        परिणाम = कार्य(*args, **kwargs)
        अन्त_समय = time.time()
        लेख्नुहोस्(f"कार्य सम्पन्न भयो: {अन्त_समय - सुरु_समय} सेकेन्डमा")
        फिर्ता परिणाम
    फिर्ता wrapper

# कन्टेक्स्ट म्यानेजर
वर्ग फाइल_म्यानेजर:
    कार्य __init__(यो, फाइल_नाम):
        यो.फाइल_नाम = फाइल_नाम
    
    कार्य __enter__(यो):
        यो.फाइल = open(यो.फाइल_नाम, 'w')
        फिर्ता यो.फाइल
    
    कार्य __exit__(यो, exc_type, exc_val, exc_tb):
        यो.फाइल.close()

# एसिन्क्रोनस प्रोग्रामिङ
कार्य async_कार्य():
    लेख्नुहोस्("एसिन्क्रोनस कार्य सुरु भयो")
    await asyncio.sleep(१)
    लेख्नुहोस्("एसिन्क्रोनस कार्य सम्पन्न भयो")

# मेटाक्लास
वर्ग मेटा_वर्ग(type):
    कार्य __new__(cls, नाम, bases, attrs):
        लेख्नुहोस्(f"नयाँ वर्ग सिर्जना भयो: {नाम}")
        फिर्ता super().__new__(cls, नाम, bases, attrs)

# प्रोपर्टी डेकोरेटर
वर्ग व्यक्ति:
    कार्य __init__(यो, नाम):
        यो._नाम = नाम
    
    @property
    कार्य नाम(यो):
        फिर्ता यो._नाम
    
    @नाम.setter
    कार्य नाम(यो, मान):
        यो._नाम = मान

# कस्टम एक्सेप्सन
वर्ग कस्टम_त्रुटि(Exception):
    कार्य __init__(यो, सन्देश):
        यो.सन्देश = सन्देश
        super().__init__(सन्देश)

# मुख्य कार्यक्रम
कार्य मुख्य():
    # जेनेरेटर प्रयोग
    लेख्नुहोस्("\nजेनेरेटर प्रयोग:")
    लागि संख्या मा संख्या_जेनेरेटर(१, ५):
        लेख्नुहोस्(संख्या)
    
    # डेकोरेटर प्रयोग
    @टाइमर
    कार्य धीमो_कार्य():
        time.sleep(१)
        लेख्नुहोस्("कार्य सम्पन्न भयो")
    
    # कन्टेक्स्ट म्यानेजर प्रयोग
    लेख्नुहोस्("\nकन्टेक्स्ट म्यानेजर प्रयोग:")
    फाइल_म्यानेजर("test.txt") जस्तो फाइल:
        फाइल.write("नमस्ते नेपाल")
    
    # एसिन्क्रोनस प्रोग्रामिङ
    लेख्नुहोस्("\nएसिन्क्रोनस प्रोग्रामिङ:")
    asyncio.run(async_कार्य())
    
    # मेटाक्लास प्रयोग
    लेख्नुहोस्("\nमेटाक्लास प्रयोग:")
    वर्ग नयाँ_वर्ग(metaclass=मेटा_वर्ग):
        कार्य __init__(यो):
            लेख्नुहोस्("नयाँ_वर्ग सिर्जना भयो")
    
    # प्रोपर्टी प्रयोग
    लेख्नुहोस्("\nप्रोपर्टी प्रयोग:")
    व्यक्ति = व्यक्ति("राम")
    लेख्नुहोस्(f"नाम: {व्यक्ति.नाम}")
    व्यक्ति.नाम = "हरि"
    लेख्नुहोस्(f"नयाँ नाम: {व्यक्ति.नाम}")
    
    # कस्टम एक्सेप्सन प्रयोग
    लेख्नुहोस्("\nकस्टम एक्सेप्सन प्रयोग:")
    यदि True:
        raise कस्टम_त्रुटि("यो एक कस्टम त्रुटि हो")

# कार्यक्रम सुरु गर्नुहोस्
मुख्य() 